#!/usr/bin/env bash

## HASS-HELPER

# Initial test release -- In memory of Hassbian
# A menu driven shell script hacked together from internet samples and other shit.

## ----------------------------------
# Step #1: Define variables
# ----------------------------------

EDITOR=ee
PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'

#  virtualenv_service:
#     Application installed in a virtualenv and
#     running as a service (using sysrc scripts)

# Directory containing virtualenvs 
v2env=/usr/local/srv  # Changing this is not tested

# The application installed inside a virtualenv
#SRV_APP = [ homeassistant | hass-configurator | appdaemon ]

# _id=8123      # Set '_uid' and '_gid'
# _uid="${_id}" # user id
# _gid="${_id}" # group id

# _user=hass    # user name
# _group=hass   # group name

# ----------------------------------
# Step #2: User defined function
# ----------------------------------

load_colors() {
  red=$'\e[1;31m'
  grn=$'\e[1;32m'
  yel=$'\e[1;33m'
  bl1=$'\e[1;34m'
  mag=$'\e[1;35m'
  cyn=$'\e[1;36m'
  blu=$'\e[38;5;39m'
  orn=$'\e[38;5;208m'
  end=$'\e[0m'
}


pause(){
  echo
  read -p "Press ENTER to continue..." fackEnterKey
}


show_banner_4() {
  clear
  echo "${blu}"
  echo '                  ___ ___ ___ _  _  ___  __  __ ___  '
  echo '                 | __/ __| _ \ || |/ _ \|  \/  | __| '
  echo '                 | _|\__ \  _/ __ | (_) | |\/| | _|  '
  echo '                 |___|___/_| |_||_|\___/|_|  |_|___| '
  echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
  echo "                      MANAGE THE ESPHOME SERVICE                       "
  echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
  echo -e "${end}"
}

service_menu() {

  local _default_actions
  local _extra_actions
  local _action
  local _confirm
  
  # Default actions that all services (in this jail) should have
  _default_actions="status restart upgrade start stop test"
  
  # Other services can be installed or removed depending on existing state
    if [ ! -d "${v2env}/${1}" ]; then
      _extra_actions="install"
    else # (toggle install/remove)
      _extra_actions="remove"
    fi
  
  PS3=""$'\n'"${blu}Select: ${end}"
  echo
  select _action in "console" ${_default_actions} ${_extra_actions}; do
    case "${_action}" in
      "console")
        m_true="N"
        break
        ;;
      "install")
        /root/post_install.sh ${1}
        pause
        break
        ;;
      "remove")
        echo -e "\n${red} DELETING ${v2env}/${1} ${end}"
        read -p " Type 'YES' to continue: " _confirm
        [[ ${_confirm} == [Yy][Ee][Ss] ]] || break
        echo
        sysrc "${1}_enable=NO"
        service "${1}" stop
        rm -rf "${v2env}/${1}"
        pause
        break
        ;;
      "status"|"restart"|"upgrade"|"start"|"stop"|"test")
        service "${1}" "${_action}"
        pause
        break
        ;;
      *) echo -e "${red}Sorry, [ ${_action} ] is not an option${end}" && sleep 1
        ;;
    esac
  done
}


show_menu_0() {
# clear --> moved to show_banner
#   echo " 1) Home Assistant"
#   echo " 2) Hass Configurator"
#   echo " 3) AppDaemon"
  echo " 4) ESPHome"
  echo
  echo " 0) EXIT"
  #echo " 4) Miscellaneous"
  echo
}


read_options(){
  local choice
  echo "${blu}"
  read -p "Select: " choice
  echo "${end}"
  case "${choice}" in
    [eE]|[eE][xX][iI][tT]|[qQ]|[cC]|[cC]|[oN][sS][oO][lL][eE]|"0")
      clear; exit 0
      ;;
    "4") # ESPHome
      m_true="Y"
      while [ ${m_true} == "Y" ]; do
        show_banner_4
        service_menu esphome
      done
      ;;
    "watch log") # Shit for me
      log_watch="Y"
      while [ ${log_watch} == "Y" ]; do
      tail -F /var/log/esphome_daemon.log
      #  show_banner_0
      #  show_menu_1
      done
      ;;
    *) echo -e "${red}Sorry, wrong number..${end}" && sleep 1
  esac
}

set_false() {
  log_watch="N"
}

show_colors() {
# Test function to see how colors look
  echo
  echo " ${red}ALERT"
  echo " ${orn}Warning "
  echo " ${yel}Caution "
  echo "${end}"
}


# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
# Included from original example
#trap '' SIGINT SIGQUIT SIGTSTP

## TODO Expand using this example instead
##      to call a function when signal is caught.

# Define and use traps to clean up all temp files
   # Trap on:  Use 'kill -l' to list all
   # 1 = SIGHUP (Hangup of controlling terminal or death of parent)
   # 2 = SIGINT (Interrupted by the keyboard)
   # 3 = SIGQUIT (Quit signal from keyboard)
   # 6 = SIGABRT (Aborted by abort(3))
   # 9 = SIGKILL (Sent a kill command)

   # Create Trap for ^\ & Others: Call Funtion CleanExit
#   trap CleanExit 1 3 6 9
   trap set_false 2


# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------

load_colors # Only need to load colors once

m_true="Y"
while [ ${m_true} == "Y" ]; do
#while true; do
  show_banner_4 && service_menu esphome
done
